import { FoodItem } from '../types/food';

// In a real app, these would be API calls to a backend
export const getFoodItems = async (): Promise<FoodItem[]> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 500));
  
  return [
    {
      id: 'FOOD-1',
      name: 'Cheeseburger Deluxe',
      description: 'Juicy beef patty with melted cheese, lettuce, tomato, and special sauce.',
      category: 'Main Course',
      price: 12.99,
      image: 'https://images.pexels.com/photos/1639557/pexels-photo-1639557.jpeg?auto=compress&cs=tinysrgb&w=100',
      status: 'Available',
      variants: [
        { id: 'VAR-1', name: 'Single Patty', price: 12.99 },
        { id: 'VAR-2', name: 'Double Patty', price: 15.99 }
      ],
      toppings: [
        { id: 'TOP-1', name: 'Extra Cheese', price: 1.00 },
        { id: 'TOP-2', name: 'Bacon', price: 1.50 },
        { id: 'TOP-3', name: 'Avocado', price: 1.25 }
      ]
    },
    {
      id: 'FOOD-2',
      name: 'Pepperoni Pizza',
      description: 'Classic pizza with tomato sauce, mozzarella, and pepperoni.',
      category: 'Main Course',
      price: 15.99,
      image: 'https://images.pexels.com/photos/825661/pexels-photo-825661.jpeg?auto=compress&cs=tinysrgb&w=100',
      status: 'Available',
      variants: [
        { id: 'VAR-3', name: 'Small (10")', price: 15.99 },
        { id: 'VAR-4', name: 'Medium (14")', price: 18.99 },
        { id: 'VAR-5', name: 'Large (18")', price: 21.99 }
      ],
      toppings: [
        { id: 'TOP-4', name: 'Extra Pepperoni', price: 1.50 },
        { id: 'TOP-5', name: 'Mushrooms', price: 1.00 },
        { id: 'TOP-6', name: 'Olives', price: 1.00 }
      ]
    },
    {
      id: 'FOOD-3',
      name: 'Chicken Caesar Salad',
      description: 'Fresh romaine lettuce with grilled chicken, croutons, parmesan cheese, and Caesar dressing.',
      category: 'Salad',
      price: 10.50,
      image: 'https://images.pexels.com/photos/1211887/pexels-photo-1211887.jpeg?auto=compress&cs=tinysrgb&w=100',
      status: 'Available',
      variants: [
        { id: 'VAR-6', name: 'Regular', price: 10.50 },
        { id: 'VAR-7', name: 'Large', price: 13.50 }
      ],
      toppings: [
        { id: 'TOP-7', name: 'Extra Chicken', price: 2.00 },
        { id: 'TOP-8', name: 'Extra Croutons', price: 0.50 },
        { id: 'TOP-9', name: 'Extra Dressing', price: 0.50 }
      ]
    },
    {
      id: 'FOOD-4',
      name: 'French Fries',
      description: 'Crispy golden french fries seasoned with salt.',
      category: 'Side',
      price: 4.99,
      image: 'https://images.pexels.com/photos/1583884/pexels-photo-1583884.jpeg?auto=compress&cs=tinysrgb&w=100',
      status: 'Available',
      variants: [
        { id: 'VAR-8', name: 'Regular', price: 4.99 },
        { id: 'VAR-9', name: 'Large', price: 6.99 }
      ],
      toppings: [
        { id: 'TOP-10', name: 'Cheese Sauce', price: 1.00 },
        { id: 'TOP-11', name: 'Gravy', price: 1.00 },
        { id: 'TOP-12', name: 'Bacon Bits', price: 1.50 }
      ]
    },
    {
      id: 'FOOD-5',
      name: 'Chocolate Milkshake',
      description: 'Rich and creamy chocolate milkshake topped with whipped cream.',
      category: 'Beverage',
      price: 5.50,
      image: 'https://images.pexels.com/photos/103566/pexels-photo-103566.jpeg?auto=compress&cs=tinysrgb&w=100',
      status: 'Available',
      variants: [
        { id: 'VAR-10', name: 'Regular', price: 5.50 },
        { id: 'VAR-11', name: 'Large', price: 7.50 }
      ],
      toppings: [
        { id: 'TOP-13', name: 'Chocolate Syrup', price: 0.50 },
        { id: 'TOP-14', name: 'Sprinkles', price: 0.50 },
        { id: 'TOP-15', name: 'Cherry', price: 0.25 }
      ]
    }
  ];
};

export const getFoodItemById = async (id: string): Promise<FoodItem | null> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 300));
  
  const allItems = await getFoodItems();
  return allItems.find(item => item.id === id) || null;
};

export const createFoodItem = async (foodItem: Omit<FoodItem, 'id'>): Promise<FoodItem> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 500));
  
  // In a real app, the ID would be generated by the server
  const newId = `FOOD-${Math.floor(Math.random() * 1000)}`;
  
  return {
    id: newId,
    ...foodItem
  };
};

export const updateFoodItem = async (id: string, foodItem: Partial<FoodItem>): Promise<FoodItem> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 500));
  
  const existingItem = await getFoodItemById(id);
  
  if (!existingItem) {
    throw new Error('Food item not found');
  }
  
  return {
    ...existingItem,
    ...foodItem
  };
};

export const deleteFoodItem = async (id: string): Promise<void> => {
  // Simulate API delay
  await new Promise((resolve) => setTimeout(resolve, 500));
  
  // In a real app, this would make a DELETE request to the server
  // For now, we'll just simulate success
  return;
};